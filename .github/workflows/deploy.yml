name: Deploy to Cloudflare Pages

# Trigger on pushes to main/master and PRs targeting those branches
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

# Environment variables shared across all jobs
env:
  NODE_VERSION: '20'
  WORKING_DIR: 'rpac-web'

jobs:
  # ============================================================================
  # Lint Job - Runs first, must pass before deploy
  # ============================================================================
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: rpac-web/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run lint -- --max-warnings=0
        continue-on-error: false

      - name: Run TypeScript type check
        working-directory: ${{ env.WORKING_DIR }}
        run: npx tsc --noEmit
        continue-on-error: false

  # ============================================================================
  # Deploy Job - Builds and deploys to Cloudflare Pages
  # Only runs if lint job passes
  # ============================================================================
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: lint
    
    permissions:
      contents: read
      deployments: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: rpac-web/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm ci

      # Cache Next.js build output to speed up builds
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            rpac-web/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('rpac-web/package-lock.json') }}-${{ hashFiles('rpac-web/**/*.js', 'rpac-web/**/*.jsx', 'rpac-web/**/*.ts', 'rpac-web/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('rpac-web/package-lock.json') }}-

      # Build Next.js application
      - name: Build Next.js application
        working-directory: ${{ env.WORKING_DIR }}
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # Build for Cloudflare Pages using existing .next build
      # The @cloudflare/next-on-pages will detect and use the existing build
      - name: Build for Cloudflare Pages
        working-directory: ${{ env.WORKING_DIR }}
        run: npx @cloudflare/next-on-pages
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      # Verify the build output before deployment
      - name: Verify build output
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "Checking build output..."
          if [ -d ".vercel/output/static" ]; then
            echo "‚úÖ Build output exists at .vercel/output/static"
            echo "üì¶ Output size: $(du -sh .vercel/output/static | cut -f1)"
            echo "üìÅ Top-level files:"
            ls -lh .vercel/output/static/ | head -15
          else
            echo "‚ùå Build output not found at .vercel/output/static"
            exit 1
          fi

      # Deploy to Cloudflare Pages using Wrangler
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy .vercel/output/static --project-name=rpac-web
          workingDirectory: ${{ env.WORKING_DIR }}

      # Report deployment success
      - name: Deployment summary
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to Cloudflare Pages!"
          echo "üîó Project: rpac-web"
          echo "üìÖ Compatibility date: 2024-10-21"
